@{
    Layout = null;
}


<!DOCTYPE html>
<html>
<head>
    <meta name="description" content="d3 bar chart vertical bars without axis">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <title>JS Bin</title>

    <script src="http://d3js.org/d3.v4.min.js"></script>
    <script src="http://techanjs.org/techan.min.js"></script>

    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css" />
    <link rel="stylesheet" href="~/css/site.css" />

    <style>
        body {
            font: 10px sans-serif;
        }

        .axis text {
            font-size: 12px;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: black;
        }


        text.symbol {
            fill: #BBBBBB;
        }

        path.candle {
            stroke: #000000;
        }

            path.candle.body {
                stroke-width: 0;
            }

            path.candle.up {
                fill: #6BA583;
                stroke: #000000;
            }

            path.candle.down {
                fill: #D75442;
                stroke: #000000;
            }

        path.volume {
            fill: #DDDDDD;
        }

        rect.pane {
            cursor: move;
            fill: none;
            pointer-events: all;
        }

        .indicator path.line {
            fill: none;
            stroke-width: 1;
        }

        .ma-0 path.line {
            stroke: #1f77b4;
        }

        .ma-1 path.line {
            stroke: #aec7e8;
        }

        .ma-2 path.line {
            stroke: #ff7f0e;
        }

        .crosshair {
            cursor: crosshair;
        }

            .crosshair path.wire {
                stroke: #DDDDDD;
                stroke-dasharray: 1, 1;
            }

            .crosshair .axisannotation path {
                fill: #DDDDDD;
            }

        .tick line {
            opacity: 0.2;
        }

        .button {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
        }

    </style>
</head>

<body> 
    <nav class="navbar navbar-inverse navbar-fixed-top">
        <div class="container-fluid">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a asp-area="" asp-controller="Home" asp-action="Index" class="navbar-brand">TheTradingGym</a>
            </div>
</nav>

    <button class="button" onclick="PlayData()">Play</button>
    <button class="button" onclick="PauseData()">Pause</button>
    SMA0: <input type="text" id="sma0Val" value="200">
    <button class="button" onclick="SetSMA0Val()">Update</button>
    <button class="button" onclick="CreateLongOrder()">LONG</button>
    <button class="button" onclick="CreateShortOrder()">SHORT</button>
    <button class="button" onclick="ClosePosition()">Close</button>
    <h3 id="returnsValue">P&L: $0</h3>
    <h3 id="cash">Cash: $1000</h3>

    <script>

        var name = "Facebook";
        var symbol = "data";
        var fullWidth = 1100;
        var fullHeight = 700;


            var margin = { top: 20, right: 50, bottom: 30, left: 30 },
                width = fullWidth - margin.left - margin.right,
                height = fullHeight - margin.top - margin.bottom,
                volumeHeight = fullHeight * .25;

            var parseDate = d3.timeParse("%d-%b-%y");

            var zoom = d3.zoom()
                .on("zoom", zoomed);

            var x = techan.scale.financetime()
                .range([0, width]);

            var y = d3.scaleLinear()
                .range([height, 0]);

            var yPercent = y.copy();   // Same as y at this stage, will get a different domain later

            var yVolume = d3.scaleLinear()
                .range([height, height - volumeHeight]);

            var yInit, yPercentInit, zoomableInit;

            var candlestick = techan.plot.candlestick()
                .xScale(x)
                .yScale(y);

            var sma0 = techan.plot.sma()
                .xScale(x)
                .yScale(y);

            var sma1 = techan.plot.sma()
                .xScale(x)
                .yScale(y);

            var volume = techan.plot.volume()
                .accessor(candlestick.accessor())   // Set the accessor to a ohlc accessor so we get highlighted bars
                .xScale(x)
                .yScale(yVolume);

            var xAxis = d3.axisBottom(x)
                .ticks(4);


            var yAxis = d3.axisRight(y)
                .ticks(4);

            var percentAxis = d3.axisLeft(yPercent)
                .ticks(4)
                .tickFormat(d3.format('+.1%'));

            var volumeAxis = d3.axisRight(yVolume)
                .ticks(2)
                .tickFormat(d3.format(",.3s"));

            var timeAnnotation = techan.plot.axisannotation()
                .axis(xAxis)
                .orient('bottom')
                .format(d3.timeFormat('%Y-%m-%d'))
                .width(65)
                .translate([0, height]);

            var xTopAxis = d3.axisTop(x)
            var timeTopAnnotation = techan.plot.axisannotation()
                .axis(xTopAxis)
                .orient('top');

            var yRightAxis = d3.axisRight(y);
            var ohlcRightAnnotation = techan.plot.axisannotation()
                .axis(yRightAxis)
                .orient('right')
                .translate([width, 0]);

            var crosshair = techan.plot.crosshair()
                .xScale(x)
                .yScale(y)
                .xAnnotation([timeAnnotation, timeTopAnnotation])
                .yAnnotation([ohlcRightAnnotation])
                .verticalWireRange([0, fullHeight]);

            var svg = d3.select("body").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            var scale = d3.scaleLinear()
                .domain([0, 100])
                .range([0, width]);
            var gridLinesX = d3.axisTop()
                .tickFormat("")
                .tickSize(-height)
                .scale(scale);

            svg.append("clipPath")
                .attr("id", "clip")
                .append("rect")
                .attr("x", 0)
                .attr("y", y(1))
                .attr("width", width)
                .attr("height", y(0) - y(1));

            svg.append('text')
                .attr("class", "symbol")
                .attr("x", 5)
                .text(name + " (" + symbol + ")");

            svg.append("g")
                .attr("class", "volume")
                .attr("clip-path", "url(#clip)");

            svg.append("g")
                .attr("class", "candlestick")
                .attr("clip-path", "url(#clip)");

            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")");

            svg.append("g")
                .attr("class", "y axis")
                .attr("transform", "translate(" + width + ",0)");

            svg.append("g")
                .attr("class", "volume axis");

            svg.append("rect")
                .attr("class", "pane")
                .attr("width", width)
                .attr("height", height)
                .call(zoom);

            svg.append('g')
                .attr("class", "crosshair")

            svg.append("g")
                .attr("class", "indicator sma ma-0")
                .attr("clip-path", "url(#clip)");

            svg.append("g")
                .attr("class", "indicator sma ma-1")
                .attr("clip-path", "url(#clip)");

            var feed, dataSet, curZoom;
            d3.csv("@Url.Action("GetCSV")", function (error, data) {
                var accessor = candlestick.accessor(),
                    indicatorPreRoll = 33;  // Don't show where indicators don't have data

                data = data.map(function (d) {
                    return {
                        date: parseDate(d.Date),
                        open: +d.Open,
                        high: +d.High,
                        low: +d.Low,
                        close: +d.Close,
                        volume: +d.Volume
                    };
                }).sort(function (a, b) {
                    return d3.ascending(accessor.d(a), accessor.d(b));
                });
                //yPercentInit = yPercent.copy();

                var accessor = candlestick.accessor(),
                    indicatorPreRoll = 33;  // Don't show where indicators don't have data

                dataSet = data;
                feed = data.slice(0, 210);

                x.domain(techan.scale.plot.time(feed, accessor).domain());
                y.domain(techan.scale.plot.ohlc(feed.slice(indicatorPreRoll), accessor).domain());
                yPercent.domain(techan.scale.plot.percent(y, accessor(feed[indicatorPreRoll])).domain());
                yVolume.domain(techan.scale.plot.volume(feed, accessor.v).domain());

                svg.select("g.candlestick").datum(feed).call(candlestick);
                svg.select("g.volume").datum(feed).call(volume);
                svg.select("g.sma.ma-0").datum(techan.indicator.sma().period(200)(feed)).call(sma0);
                svg.select("g.sma.ma-1").datum(techan.indicator.sma().period(50)(feed)).call(sma1);
                svg.select("g.crosshair").call(crosshair).call(zoom);

                zoomableInit = x.zoomable().clamp(false).domain([0, feed.length]).copy(); // Zoom in a little to hide indicator preroll
                yInit = y.copy();

                curZoom = [0, 210]

                //splicedData = feed.splice(0, 163);
                draw();

                AddData();
                Engine();
            });

            var streamData = false;
            var sma0Val = 200;
            var positions = [];
            var cash = 1000;

            function AddData() {
                if (streamData == true) {
                    feed = dataSet.slice(0, feed.length + 1);
                }

                var accessor = candlestick.accessor(),
                    indicatorPreRoll = 33;  // Don't show where indicators don't have data

                x.domain(techan.scale.plot.time(feed, accessor).domain());

                x.zoomable().domain(curZoom);

                y.domain(techan.scale.plot.ohlc(feed.slice(indicatorPreRoll), accessor).domain());
                yPercent.domain(techan.scale.plot.percent(y, accessor(feed[indicatorPreRoll])).domain());
                yVolume.domain(techan.scale.plot.volume(feed, accessor.v).domain());

                svg.select("g.sma.ma-0").datum(techan.indicator.sma().period(sma0Val)(feed)).call(sma0);
                svg.select("g.sma.ma-1").datum(techan.indicator.sma().period(50)(feed)).call(sma1);
                svg.select("g.candlestick").datum(feed).call(candlestick);
                svg.select("g.volume").datum(feed).call(volume);

                //Update Equity Values
                if (positions.length > 0) {

                    var returns = feed[feed.length - 1].close - positions[0].purchaceValue;

                    returns = returns * positions[0].type;

                    document.getElementById("returnsValue").innerHTML = "P&L: $" + returns;
                } 
                
                setTimeout(function () {
                    AddData();
                }, (Math.random() * 0) + 100);
            }

            function Engine() {
                setTimeout(function () {
                    AddData();
                }, (Math.random() * 0) + 1);
            }

            function reset() {
                zoom.scale(1);
                zoom.translate([0, 0]);
                draw();
            }

            function zoomed() {
                curZoom = d3.event.transform.rescaleX(zoomableInit).domain();
                x.zoomable().domain(d3.event.transform.rescaleX(zoomableInit).domain());
                //y.domain(d3.event.transform.rescaleY(yInit).domain());
                //yPercent.domain(d3.event.transform.rescaleY(yPercentInit).domain());
                draw();
            }

            function draw() {
                svg.select("g.x.axis").call(xAxis);
                svg.select("g.y.axis").call(yAxis);
                svg.select("g.volume.axis").call(volumeAxis);
                svg.select("g.percent.axis").call(percentAxis);

                // We know the data does not change, a simple refresh that does not perform data joins will suffice.
                svg.select("g.candlestick").call(candlestick.refresh);
                svg.select("g.volume").call(volume.refresh);
                svg.select("g.sma.ma-0").call(sma0.refresh);
                svg.select("g.sma.ma-1").call(sma1.refresh);
                svg.select("g.crosshair").call(crosshair.refresh);
            }

            function PlayData()
            {
                streamData = true;
            }
            function PauseData() {
                streamData = false;
            }

            function SetSMA0Val() {
                sma0Val=  document.getElementById("sma0Val").value;
            }

            function CreateLongOrder() {

                var curPrice = feed[feed.length - 1].close;

                var position = {
                    ticker: "FB",
                    type: 1,
                    units: 1,
                    purchaceValue: curPrice,
                    curValue: curPrice
                };

                positions.push(position);
                PurchaseInstrument(curPrice);

                console.log("LONG Position opened at " + curPrice);
            }

            function CreateShortOrder() {

                var curPrice = feed[feed.length - 1].close;

                var position = {
                    ticker: "FB",
                    type: -1,
                    units: 1,
                    purchaceValue: curPrice,
                    curValue: curPrice
                };

                positions.push(position);
                PurchaseInstrument(curPrice);

                console.log("SHORT Position opened at " + curPrice);
            }

            function PurchaseInstrument(value) {
                cash = cash - (value);
                document.getElementById("cash").innerHTML = "Cash: $" + cash;
            }

            function ClosePosition() {
                cash = cash + ((feed[feed.length - 1].close - positions[0].purchaceValue) * positions[0].type) + positions[0].purchaceValue;
                document.getElementById("cash").innerHTML = "Cash: $" + cash;

                document.getElementById("returnsValue").innerHTML = "P&L: $0";

                console.log("Position close with value " + ((feed[feed.length - 1].close - positions[0].purchaceValue) * positions[0].type));
                positions.splice(0, 1);

            }

    </script>

</body >
</html >